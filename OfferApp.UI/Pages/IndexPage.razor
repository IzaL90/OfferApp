@page "/"
@inject IBidService BidService
@inject ILogger<IndexPage> Logger

<PageTitle>Offers</PageTitle>

<h1 data-name="offers-information">Hello, welcome to bid management!</h1>

@if (Loading)
{
    <LoadingIconComponent />
}
else
{
    <div class="mt-2">
        <div class="mb-2">
            <AddBidComponent OnAdd="AddBid" />
        </div>
        <BidsComponent Bids="bids"OnDelete="DeleteBid" OnPublish="OnPublish" />
    </div>
    @if (showErrorPublishingBid)
    {
        <ModalComponent Title="Error" OnClose="ClosePublishingErrorModal">
            <Content>
                <div>
                    <div class="modal-body" data-name="bid-publishing-error-text">
                        <ErrorComponent Text="@errorPublisher" />
                    </div>
                    <div class="modal-footer">
                        <div>
                            <button class="btn btn-secondary" type="button" @onclick="ClosePublishingErrorModal" data-name="bid-publishing-error-close-button">
                                Close
                            </button>
                        </div>
                    </div>
                </div>
            </Content>
        </ModalComponent>
    }
}

@code {
    public bool Loading { get; set; } = true;
    private IEnumerable<BidDto> bids = new List<BidDto>();
    private bool showErrorPublishingBid = false;
    private string? addError;
    private string? deleteError;
    private string? errorPublisher;

    protected override async Task OnInitializedAsync()
    {
        await FetchBids();
        await base.OnInitializedAsync();
    }

    private async Task AddBid(BidDto bidDto)
    {
        try
        {
            addError = null;
            await BidService.AddBid(bidDto);
        }
        catch(Exception exception)
        {
            if (exception is InvalidOperationException)
            {
                addError = exception.Message;
            }
            else
            {
                addError = "Something bad happen, please try again";
            }
            Logger.LogError(exception, exception.Message);
        }
        await FetchBids();
    }

    private async Task DeleteBid(BidDto bidDto)
    {
        if (bidDto is null)
        {
            return;
        }

        try
        {
            await BidService.DeleteBid(bidDto.Id);
        }
        catch (Exception exception)
        {
            if (exception is InvalidOperationException)
            {
                deleteError = exception.Message;
            }
            else
            {
                deleteError = "Something bad happen, please try again";
            }
            Logger.LogError(exception, exception.Message);
        }
        await FetchBids();
    }

    private async Task OnPublish(SetBidPublishDto dto)
    {
        if (dto is null)
        {
            return;
        }

        if (dto.Published)
        {
            try
            {
                await BidService.Published(dto.Id);
            }
            catch (Exception exception)
            {
                if (exception is InvalidOperationException)
                {
                    errorPublisher = exception.Message;
                }
                else
                {
                    errorPublisher = "Something bad happen, please try again";
                }
                OpenPublishingErrorModal();
                Logger.LogError(exception, exception.Message);
            }
        }
        else
        {
            try
            {
                await BidService.Unpublished(dto.Id);
            }
            catch (Exception exception)
            {
                if (exception is InvalidOperationException)
                {
                    errorPublisher = exception.Message;
                }
                else
                {
                    errorPublisher = "Something bad happen, please try again";
                }
                OpenPublishingErrorModal();
                Logger.LogError(exception, exception.Message);
            }
        }
        await FetchBids();
    }

    private async Task FetchBids()
    {
        Loading = true;
        try
        {
            bids = await BidService.GetAllBids();            
        }
        catch(Exception exception)
        {
            Logger.LogError(exception, exception.Message);
        }
        Loading = false;
    }

    private void OpenPublishingErrorModal()
    {
        showErrorPublishingBid = true;
    }

    private void ClosePublishingErrorModal()
    {
        showErrorPublishingBid = false;
        errorPublisher = null;
    }
}

@page "/bids/bid-up/{Id:int}"
@inject IBidService BidService
@inject NavigationManager NavigationManager
@inject ILogger<BidUpPage> Logger

<h3>Bid Up</h3>

@if (Loading)
{
    <LoadingIconComponent />
}
else if (bid is not null)
{
    @if (bid.Published)
    {
        <div class="mt-2" data-name="bid-up-form">
            <ErrorComponent Text="@error" />
            <div class="mt-2 form-group">
                <label data-name="bid-up-label">Last Price</label>
                <InputNumber @bind-Value="lastBidPrice" class="form-control" data-name="bid-up-input-value" />
            </div>
            <div class="mt-2">
                <button class="btn btn-success" data-name="bid-up-button-accept" @onclick="BidUp">
                    Bid Up
                </button>
                <button class="btn btn-secondary" data-name="bid-up-button-cancel" @onclick='() => NavigationManager.NavigateTo("/bids/published")'>
                    Cancel
                </button>
            </div>
        </div>
    }
    else
    {
        <h5 data-name="bid-not-published-message">Bid with id '@(Id)' is not published</h5>
    }
}
else
{
    <h5 data-name="bid-not-found-message">Bid with id '@(Id)' was not found</h5>
}

@code {
    [Parameter]
    public int Id { get; set; }

    public bool Loading { get; set; } = true;

    private BidDto? bid;
    private decimal lastBidPrice = 0;
    private string? error;

    protected override async Task OnInitializedAsync()
    {
        await FetchBid();
        if (bid is not null)
        {
            lastBidPrice = bid.LastPrice.HasValue ? bid.LastPrice.Value : bid.FirstPrice;
        }

        await base.OnInitializedAsync();
    }

    private async Task BidUp()
    {
        try
        {
            error = null;
            await BidService.BidUp(new BidUpDto { Id = Id, Price = lastBidPrice });
            NavigationManager.NavigateTo("/bids/published");
        }
        catch (Exception exception)
        {
            if (exception is InvalidOperationException)
            {
                error = exception.Message;
            }
            else
            {
                error = "Something bad happen, please try again";
            }
            Logger.LogError(exception, exception.Message);
        }
    }

    private async Task FetchBid()
    {
        try
        {
            Loading = true;
            bid = await BidService.GetBidById(Id);
        }
        catch(Exception exception)
        {
            Logger.LogError(exception, exception.Message);
        }
        Loading = false;            
    }
}
